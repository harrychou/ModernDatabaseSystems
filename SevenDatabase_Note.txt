Seven Databases in Seven Weeks
- A Guide to Modern Databases and the NoSQL Movement

Eric Redmond and Jim RWilson

----------------------------------------------------------
Preface 
----------------------------------------------------------

  * Data is the new oil
  * Database? - the fields, the refineriers, the drills, pumps
  * Database is a tool
    - just means to an end
    - each db has its own way of looking at the world
    - know the underlying model/principles will help you
  * seven databases
    - no-sql book
    - inspired by seven-languages
  * about the book
    - PostgreSQL
    - Riak
    - Apache HBase
    - MongoDB
    - Apache CouchDB
    - Neo4J
    - Redis

----------------------------------------------------------
1 Introduction ?
----------------------------------------------------------

  * for years, relational model is the 'de facto' option
  * NoSQL movement
  * functionalities and trade-offs
    - durability vs speed
    - absolute vs eventual consistency
    - ...

1.1 It Starts with a Question ?
  
  * how to best choose a database?
  * need to understand the options first
  * how to make the best decision for your use case
    - when type/genre of database is this?
      * relational (PostgresSQL)
      * key-value (Riak, Redis)
      * columnar (column-based) (HBase)
      * document-oriented (MongoDB, CouchDB)
      * graph (Neo4J)
    - what was the driving force?
      * rdbms - query flexibility and efficiency
      * column-oriened - storing large amount of data across machines  
    - how do you use it?
      * connection
      * API options 
        - REST (CounchDB, Riak)
        - Thrift (HBase)
      * languages
        - generic languages (Ruby, JS)
        - PL/pgSQL 
        - Gremlin (Neo4J)
    - what makes it unique?
      * besides basic write-to and read-from
      * query on abitrary fields
      * indexing for rapid lookup
      * ad hoc or planned query
      * schema or schemaless
    - how does it perform?
      * sharding?
      * replication?
      * data distribution or centralization?
      * fine-tuned for reading/writing?
      * how to tune performance?
    - how does it scale?
      * related to performance
      * what do you want to scale? 
      * asking the right questions
      * horizontal scaling
        (MongoDB, HBase, Riak)
      * vertical scaling
        (Postgres, Neo4J, Redis)
  * not for mastery, but having a firm grasp of the strength and weekness

1.2 The Genres ?

  * Five main generes
  * relational
    - de facto
    - set-theory based system with tables/rows/columns
    - SQL queries
    - typed data values (numercis, string, dates, blobs)
    - PostgreSQL
      * adhere to SQL standard
  * key-value (KV)
    - simplest model
    - similar to hashtable/map or dictionary in most programming languages
    - keys can be iterate-able or not
    - values can be simple or complex types (hash or list)
    - filesystem is an example of key(path)-value(file) store
    - very performant in some cases
    - not useful for complex query and aggregation
    - two are covered: Redis and Riak
    - others: memcached, memcachedb, membase, Voldemort ...
    - Riak
      * embrace HTTP and REST from ground up
      * vector clocks for conflict resolution
      * values can be text or XML, or image ...
      * implementation of Amazon's Dynamo
      * relations are handled by 'links' (named structure)
      * support map/reduce
      * rising in polularity
    - Redis
      * value can be complex datatypes: sorted sets, hashes
      * basic message patterns: pub/sub, blocking queue
      * robust query 
      * great performance by caching writes before commit
      * however, writes can be lost if HW failure
      * great for non-critical data
      * can act like a message broker
  * columnar
    - data from a given columns are stored together
      (RDBMS store rows together)
    - adding column is inexpensive, delayed for row and row 
    - each row can have different set of colmns or none
    - tables can be sparse without storage cost of null values
    - midway between columnar and RDBMS
    - less competitive in market: HBase, Canssandra, Hypertable
    - HBase
      * share most similarity to RDBMS
      * basic idea comes from: Google BitTable paper
      * build on top of Hadoop (map/reduce engine)
      * designed to scale horizontally on clusters of inexpensive machines
      * strong consistency guaranty
      * still have the concept of rows and columns (make SQL fans feel better)
      * support for versioning and compression
  * document
    - store documents 
    - a big hash with unique ID as key and values of types (can be other hashes)
    - can have nested document structures
    - very flexible for various domains
    - ver few restrictions on incoming data (as long as can be represented as document)
    - different document db systems can be different in: indexing, ad hoc query, replication, consistency and others
    - two options in the book
    - MongoDB
      * hum-Mono-us (design to host huge amount of data)
      * designed to be consistent: once write, subsequent read will read the same thing
      * atomic read/write on incrementing
      * deep query of nested document structure
      * query language: javascript
      * support both simple query and complex map/reduce
    - CounchDB
      * for various deployment scenarioes: datacenter to server/desktop to smartphone
      * written in Erlang
      * ruggedness (robust? hard to approach?)
      * incorruptible data files
      * highly available even in a bad connectivity environment
      * native query in Javascript
      * view: map/reduce, as documents, replicated to all nodes
  * graph
    - less used
    - good at dealing with highly interconnected data
    - store nodes and relationships between nodes
    - nodes and relationships both have properties (key-value pairs)
    - strength: traversing nodes by following relationships
    - Neo4J
      * good for self-referenced, or complicated linked objects
      * easy to traverse and find related data
      * social networking systems
  * polyglot
    - it is still popular choice to use only one type of database
    - it is become more and more frequent to see multiple types of db used
    - 'polyglot persistence' is the topic of discuss
      leveraging all strenghts to be more powerful, capable, and robust

1.3 Onward and Upward ?

  * db system options are still evolving, hard to declare champions or dominance yet
  * the trend is to use specialized data system for special needs
  * there will be a need for DBAs that manage non-SQL databases
  * know your tools and know your options
  * this is a crash course in the workshop

----------------------------------------------------------
2 PostgreSQL ?
----------------------------------------------------------

  * 

2.1 Thatâ€™s Post-greS-Q-L ?

2.2 Day 1: Relations, CRUD, and Joins ?

2.3 Day 2: Advanced Queries, Code, and Rules ?

2.4 Day 3: Full-Text and Multidimensions ?

2.5 Wrap-Up ?

----------------------------------------------------------
3 Riak ?
----------------------------------------------------------
3.1 Riak Loves the Web ?
3.2 Day 1: CRUD, Links, and MIMEs ?
3.3 Day 2: Mapreduce and Server Clusters ?
3.4 Day 3: Resolving Conflicts and Extending Riak ?
3.5 Wrap-Up ?
----------------------------------------------------------
4 HBase ?
----------------------------------------------------------
4.1 Introducing HBase ?
4.2 Day 1: CRUD and Table Administration ?
4.3 Day 2: Working with Big Data ?
4.4 Day 3: Taking It to the Cloud ?
4.5 Wrap-Up 
----------------------------------------------------------
5MongoDB ?
----------------------------------------------------------
5.1 Hu(mongo)us ?
5.2 Day 1: CRUD and Nesting ?
5.3 Day 2: Indexing, Grouping, Mapreduce ?
5.4 Day 3: Replica Sets, Sharding, GeoSpatial, and GridFS ?
5.5 Wrap-Up ?
----------------------------------------------------------
6CouchDB ?
----------------------------------------------------------
6.1 Relaxing on the Couch ?
6.2 Day 1: CRUD, Futon, and cURL Redux ?
6.3 Day 2: Creating and Querying Views ?
6.4 Day 3: Advanced Views, Changes API, and Replicating
Data ?
6.5 Wrap-Up ?
----------------------------------------------------------
7 Neo4J ?
----------------------------------------------------------
7.1 Neo4J Is Whiteboard Friendly ?
7.2 Day 1: Graphs, Groovy, and CRUD ?
7.3 Day 2: REST, Indexes, and Algorithms ?
7.4 Day 3: Distributed High Availability ?
7.5 Wrap-Up ?
----------------------------------------------------------
8 Redis ?
----------------------------------------------------------
8.1 Data Structure Server Store ?
8.2 Day 1: CRUD and Datatypes ?
8.3 Day 2: Advanced Usage, Distribution ?
8.4 Day 3: Playing with Other Databases ?
8.5 Wrap-Up ?
----------------------------------------------------------
9 Wrapping Up ?
----------------------------------------------------------
9.1 Genres Redux ?
9.2 Making a Choice ?
9.3 Where Do We Go from Here? ?
----------------------------------------------------------
A1 Database Overview Tables ?
----------------------------------------------------------
----------------------------------------------------------
A2 The CAP Theorem ?
----------------------------------------------------------
A2.1 Eventual Consistency ?
A2.2 CAP in the Wild ?
A2.3 The Latency Trade-Off ?

----------------------------------------------------------
Bibliography 